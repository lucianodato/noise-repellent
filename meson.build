project('nrepellent.lv2','c',version: '0.2.0',default_options: ['c_std=c99'])

libspecbleach_proj = subproject('libspecbleach', default_options: ['default_library=static'])

#install folder
if(get_option('buildtype') == 'release')
    lv2_directory = join_paths(get_option('libdir'), 'lv2')
else
    lv2_directory = '.lv2'
endif
install_folder = join_paths(lv2_directory, meson.project_name())

# sources to compile
common_src = ['src/signal_crossfade.c']
noise_repellent_src = ['plugins/nrepellent.c', 'src/noise_profile_state.c']
noise_repellent_adaptive_src = 'plugins/nrepellent-adaptive.c'

#get the host operating system and configure install path and shared object extension
current_os = host_machine.system()
current_arch = host_machine.cpu_family()

#dependencies for noise repellent
lv2_dep = dependency('lv2', required : true)
nrepel_dep = libspecbleach_proj.get_variable('libspecbleach_dep')
m_dep = meson.get_compiler('c').find_library('m', required : true)
nr_dep = [lv2_dep,nrepel_dep,m_dep]

#compiler flags
cflags = []

# Add x86_64 optimization where appropriate (not for ARM, not for riscv)
if current_arch != 'aarch64' and current_arch != 'riscv64' and current_os != 'darwin' 
    cflags += ['-ffast-math', '-msse','-msse2','-mfpmath=sse']
endif
# Add osx multiarch flags when appropriate
if current_os == 'darwin'
    cflags += ['-mrecip']
endif
if current_os == 'windows'
    cflags += ['-fstack-protector']
endif

# Extension for library by os
if current_os == 'darwin' #mac
    extension = '.dylib'
else #unix like    
    extension = '.so'
endif 
if current_os == 'windows' #windows
    extension = '.dll'
    exe_wrapper = true
endif

# hide all public symbols
add_project_arguments('-fvisibility=hidden', language : 'c')
#build of the shared object
shared_library('nrepellent',
    common_src,
    noise_repellent_src,
    name_prefix: '',
    dependencies: nr_dep,
    c_args: cflags, 
    install: true,
    install_dir : install_folder
)

shared_library('nrepellent-adaptive',
    common_src,
    noise_repellent_adaptive_src,
    name_prefix: '',
    dependencies: nr_dep,
    c_args: cflags, 
    install: true,
    install_dir : install_folder
)
	
#Getting version from project configuration or from git tags
version_array = meson.project_version().split('.')

git = find_program('git', native : true, required : false)
if version_array.length() == 0 and git.found()
    version_array = run_command('git', 'describe').stdout().strip().split('-')[0].split('.')
endif

#Configure manifest.ttl
manifest_conf = configuration_data()
manifest_conf.set('LIB_EXT', extension)

manifest_ttl = configure_file(
    input : 'lv2ttl/manifest.ttl.in',
    output : 'manifest.ttl',
    configuration : manifest_conf,
    install : true,
	install_dir : install_folder
)

data_conf = configuration_data()
data_conf.set('MAJOR_VERSION', version_array[0])
data_conf.set('MINOR_VERSION', version_array[1])
data_conf.set('MICRO_VERSION', version_array[2])

#Configure nrepellent.ttl
nrepel_ttl = configure_file(
    input : join_paths('lv2ttl', 'nrepellent.ttl.in'),
    output : 'nrepellent.ttl',
    configuration : data_conf,
    install : true,
	install_dir : install_folder
)

#Configure nrepellent.ttl
nrepel_ttl = configure_file(
    input : join_paths('lv2ttl', 'nrepellent#stereo.ttl.in'),
    output : 'nrepellent#stereo.ttl',
    configuration : data_conf,
    install : true,
	install_dir : install_folder
)

#Configure nrepellent-adaptive.ttl
nrepel_ttl_adaptive = configure_file(
    input : join_paths('lv2ttl', 'nrepellent-adaptive.ttl.in'),
    output : 'nrepellent-adaptive.ttl',
    configuration : data_conf,
    install : true,
	install_dir : install_folder
)

#Configure nrepellent-adaptive#stereo.ttl
nrepel_ttl_adaptive_stereo = configure_file(
    input : join_paths('lv2ttl', 'nrepellent-adaptive#stereo.ttl.in'),
    output : 'nrepellent-adaptive#stereo.ttl',
    configuration : data_conf,
    install : true,
	install_dir : install_folder
)